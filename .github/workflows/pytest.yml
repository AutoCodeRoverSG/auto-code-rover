name: Run PyTest with Coverage

on:
  push:
    branches:
      - main
      - pytest-ci
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build docker image
      run: docker build -f Dockerfile.minimal -t acr .

    - name: Start docker image (background)
      run: docker run --name acr-pytest -t -d acr 

    # Due to diffuculties with `conda activate` in docker, we do `conda run` while specifying the environment
    # setting cov-report to term and xml -> outputs coverage report to terminal, and an xml file inside the container
    - name: Run PyTest with Coverage (inside docker)
      run: docker exec acr-pytest conda run --no-capture-output -n auto-code-rover pytest --cov=app test/ --cov-report=term --cov-report=xml

    - name: Create coverage reports directory
      run: mkdir -p .coverage-reports

    # Saving the coverage report to Ubuntu VM as converage.xml (copies it from inside the container)
    - name: Saving coverage report
      run: docker cp acr-pytest:/opt/auto-code-rover/coverage.xml .coverage-reports/coverage.xml

    # To enable SonarQube Scan, the following steps are required (admin access required)
    # 1) Create a new project in SonarQube for the Repo
    # 2) Generate a token for the project and save it as SONAR_TOKEN in the repo secrets
    # 3) To obtain test coverage data, modify the sonar-project.properties file in the root of the repo (Project key, Organization, Coverage report path)
    # 4) Uncomment the following lines
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
